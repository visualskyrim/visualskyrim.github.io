<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Visual Skyrim</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2014-09-26T21:25:03+09:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Chris Kong</name>
  <uri>http://localhost:4000/</uri>
  <email>visual.skyrim@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Akka - Logging to multiple files]]></title>
 <link rel="alternate" type="text/html" href="http://localhost:4000/Akka%20-%20Logging%20to%20multiple%20files/" />
  <id>http://localhost:4000/Akka - Logging to multiple files</id>
  <updated>2013-09-16T00:00:00-00:00</updated>
  <published>2014-09-16T00:00:00+09:00</published>
  
  <author>
    <name>Chris Kong</name>
    <uri>http://localhost:4000</uri>
    <email>visual.skyrim@gmail.com</email>
  </author>
  <content type="html"># Akka - Logging to multiple files

Ref:

[1] - [Defining 1 logback file per level](http://stackoverflow.com/a/9344385/1105455)
[2] - [logback - manual](http://logback.qos.ch/manual/filters.html#levelFilter)
[3] - [Akka - Log into files](http://qiita.com/visualskyrim/items/8aa73b1136180660234e)

In my last memo about how to use logback in Akka to log into file system, I showed the way to config `logback.xml`.

However, recently I find it killing me when I use this log file for bug-shooting, because all the log, including *debug*, *info*, *warning*, *error* are all in one file. And what I am really looking for is *error*, which is really rare in the log file.

So, it seems reasonable to place logs of different level into different files. In my case, which would also cover most cases, I will place all the *info* log line into **info.log**, and all the *error* log and above to the **error.log**.

Since we are place log into different files, we are going to use multiple appenders.

#### To put info log one file

```xml:logback.xml
  &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;file&gt;log/info.log&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;!-- Daily rollover with compression --&gt;
            &lt;fileNamePattern&gt;process-log-%d{yyyy-MM-dd}.gz&lt;/fileNamePattern&gt;
            &lt;!-- keep 30 days worth of history --&gt;
            &lt;maxHistory&gt;90&lt;/maxHistory&gt;
        &lt;/rollingPolicy&gt;
        &lt;append&gt;true&lt;/append&gt;
        &lt;!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%d,%msg%n&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;
            &lt;level&gt;INFO&lt;/level&gt;
            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;
            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;
        &lt;/filter&gt;
    &lt;/appender&gt;
```
 
The key point is in the ***filter*** element. This filter uses [LevelFilter](http://logback.qos.ch/manual/filters.html#levelFilter) to decide which level of log should be logged.


#### To put error and all levels above to another file

```xml:logback.xml
  &lt;appender name=&quot;ERROR_FILE&quot; class = &quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;file&gt;
            log/error.log
        &lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;!-- daily rollover with compression --&gt;
            &lt;fileNamePattern&gt;error-log-%d{yyyy-MM-dd}.gz&lt;/fileNamePattern&gt;
            &lt;!-- keep 1 week worth of history --&gt;
            &lt;maxHistory&gt;100&lt;/maxHistory&gt;
        &lt;/rollingPolicy&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;
            &lt;level&gt;ERROR&lt;/level&gt;
        &lt;/filter&gt;
    &lt;/appender&gt;
```

In this example, we use [ThresholdFilter](http://logback.qos.ch/manual/filters.html#thresholdFilter) to select all the levels above the *error* to log file.

#### Then, put two appenders together

This is the tricky part. We ganna use two ***root logger*** in the same *logback.xml*.

```xml:logback.xml

&lt;configuration&gt;
    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;file&gt;log/process.log&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;!-- Daily rollover with compression --&gt;
            &lt;fileNamePattern&gt;process-log-%d{yyyy-MM-dd}.gz&lt;/fileNamePattern&gt;
            &lt;!-- keep 30 days worth of history --&gt;
            &lt;maxHistory&gt;90&lt;/maxHistory&gt;
        &lt;/rollingPolicy&gt;
        &lt;append&gt;true&lt;/append&gt;
        &lt;!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%d,%msg%n&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;
            &lt;level&gt;INFO&lt;/level&gt;
            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;
            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;
        &lt;/filter&gt;
    &lt;/appender&gt;

    &lt;appender name=&quot;ERROR_FILE&quot; class = &quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;file&gt;
            log/error.log
        &lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;!-- daily rollover with compression --&gt;
            &lt;fileNamePattern&gt;error-log-%d{yyyy-MM-dd}.gz&lt;/fileNamePattern&gt;
            &lt;!-- keep 1 week worth of history --&gt;
            &lt;maxHistory&gt;100&lt;/maxHistory&gt;
        &lt;/rollingPolicy&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%date{yyyy-MM-dd HH:mm:ss ZZZZ} %message%n&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;
            &lt;level&gt;ERROR&lt;/level&gt;
        &lt;/filter&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;ERROR&quot;&gt;
        &lt;appender-ref ref=&quot;ERROR_FILE&quot; /&gt;
    &lt;/root&gt;
    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;FILE&quot; /&gt;
    &lt;/root&gt;
&lt;/configuration&gt;
```

***

#### Finally

Now, in your SomeActor.scala:

```scala:SomeActor.scala

class SomeActor extends Actor with ActorLogging {

  implicit val ec = context.dispatcher

  def receive = {
    case x: SomeMsg =&gt;
      log.info(&quot;will be logged into info.log&quot;)
      log.error(&quot;will be logged into error.log&quot;)
  }
}
```

Hope this will help you.

  &lt;p&gt;&lt;a href=&quot;http://localhost:4000/Akka%20-%20Logging%20to%20multiple%20files/&quot;&gt;Akka - Logging to multiple files&lt;/a&gt; was originally published by Chris Kong at &lt;a href=&quot;http://localhost:4000&quot;&gt;Visual Skyrim&lt;/a&gt; on September 16, 2014.&lt;/p&gt;</content>
</entry>

</feed>
